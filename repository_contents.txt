REPOSITORY STRUCTURE AND CONTENTS
Generated on: 2025-07-05T18:01:08.726Z
Total files: 38
================================================================================

FOLDER STRUCTURE:
--------------------------------------------------------------------------------
├── .github
│   └── workflows
│       └── deploy.yml (.yml)
├── public
│   ├── card-images
│   ├── index.html (.html)
│   └── manifest.json (.json)
├── src
│   ├── __tests__
│   │   └── components
│   │       └── GameCard.test.tsx (.tsx)
│   ├── app
│   │   ├── game
│   │   │   └── page.tsx (.tsx)
│   │   ├── types
│   │   │   └── game.ts (.ts)
│   │   ├── globals.css (.css)
│   │   ├── layout.tsx (.tsx)
│   │   └── page.tsx (.tsx)
│   ├── components
│   │   ├── ui
│   │   │   ├── Button.tsx (.tsx)
│   │   │   ├── Card.tsx (.tsx)
│   │   │   ├── GameCard.tsx (.tsx)
│   │   │   ├── Scoreboard.tsx (.tsx)
│   │   │   └── Skeleton.tsx (.tsx)
│   │   ├── ErrorBoundary.tsx (.tsx)
│   │   ├── GameBoard.tsx (.tsx)
│   │   ├── GameStats.tsx (.tsx)
│   │   └── PlayerSetup.tsx (.tsx)
│   ├── leaderboard
│   │   └── page.tsx (.tsx)
│   ├── lib
│   │   ├── firebase-service.ts (.ts)
│   │   ├── firebase-test.ts (.ts)
│   │   ├── firebase.ts (.ts)
│   │   ├── preferences.ts (.ts)
│   │   ├── sound-manager.ts (.ts)
│   │   └── utils.ts (.ts)
│   ├── store
│   │   └── game-store.ts (.ts)
│   └── types
│       └── global.d.ts (.ts)
├── .gitignore
├── eslint.config.mjs (.mjs)
├── firebase.json (.json)
├── jest.config.ts (.ts)
├── jest.setup.ts (.ts)
├── LICENSE
├── next.config.ts (.ts)
├── package.json (.json)
├── postcss.config.mjs (.mjs)
├── README.md (.md)
└── tsconfig.json (.json)

FILE CONTENTS:
================================================================================

════════════════════════════════════════════════════════════════════════════════
FILE: .github\workflows\deploy.yml
════════════════════════════════════════════════════════════════════════════════

name: Deploy Memory Game

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run type-check
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
    
    # Add your preferred deployment step here (Azure, Vercel, etc.)

════════════════════════════════════════════════════════════════════════════════
FILE: .gitignore
════════════════════════════════════════════════════════════════════════════════

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


════════════════════════════════════════════════════════════════════════════════
FILE: eslint.config.mjs
════════════════════════════════════════════════════════════════════════════════

import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


════════════════════════════════════════════════════════════════════════════════
FILE: firebase.json
════════════════════════════════════════════════════════════════════════════════

{
  "hosting": {
    "public": "out",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

════════════════════════════════════════════════════════════════════════════════
FILE: jest.config.ts
════════════════════════════════════════════════════════════════════════════════

const nextJest = require('next/jest')

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
})

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  testMatch: [
    '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}',
    '<rootDir>/src/**/*.{spec,test}.{js,jsx,ts,tsx}',
  ],
}

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig)

════════════════════════════════════════════════════════════════════════════════
FILE: jest.setup.ts
════════════════════════════════════════════════════════════════════════════════

import '@testing-library/jest-dom'
import '@testing-library/jest-dom/extend-expect';

════════════════════════════════════════════════════════════════════════════════
FILE: LICENSE
════════════════════════════════════════════════════════════════════════════════

MIT License

Copyright (c) 2025 NeuraMindAI

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


════════════════════════════════════════════════════════════════════════════════
FILE: next.config.ts
════════════════════════════════════════════════════════════════════════════════

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


════════════════════════════════════════════════════════════════════════════════
FILE: package.json
════════════════════════════════════════════════════════════════════════════════

{
  "name": "memory-game",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build && next export",
    "deploy": "npm run build && firebase deploy",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  },
  "dependencies": {
    "@types/uuid": "^10.0.0",
    "canvas-confetti": "^1.9.3",
    "firebase": "^11.10.0",
    "framer-motion": "^12.23.0",
    "next": "15.3.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "uuid": "^11.1.0",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@types/canvas-confetti": "^1.9.0",
    "@types/jest": "^30.0.0",
    "@types/node": "^20.19.4",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.5",
    "jest": "^30.0.4",
    "jest-environment-jsdom": "^30.0.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}


════════════════════════════════════════════════════════════════════════════════
FILE: postcss.config.mjs
════════════════════════════════════════════════════════════════════════════════

const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;


════════════════════════════════════════════════════════════════════════════════
FILE: public\index.html
════════════════════════════════════════════════════════════════════════════════

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Welcome to Firebase Hosting</title>

    <!-- update the version number as needed -->
    <script defer src="/__/firebase/11.10.0/firebase-app-compat.js"></script>
    <!-- include only the Firebase features as you need -->
    <script defer src="/__/firebase/11.10.0/firebase-auth-compat.js"></script>
    <script defer src="/__/firebase/11.10.0/firebase-database-compat.js"></script>
    <script defer src="/__/firebase/11.10.0/firebase-firestore-compat.js"></script>
    <script defer src="/__/firebase/11.10.0/firebase-functions-compat.js"></script>
    <script defer src="/__/firebase/11.10.0/firebase-messaging-compat.js"></script>
    <script defer src="/__/firebase/11.10.0/firebase-storage-compat.js"></script>
    <script defer src="/__/firebase/11.10.0/firebase-analytics-compat.js"></script>
    <script defer src="/__/firebase/11.10.0/firebase-remote-config-compat.js"></script>
    <script defer src="/__/firebase/11.10.0/firebase-performance-compat.js"></script>
    <!-- 
      initialize the SDK after all desired features are loaded, set useEmulator to false
      to avoid connecting the SDK to running emulators.
    -->
    <script defer src="/__/firebase/init.js?useEmulator=true"></script>

    <style media="screen">
      body { background: #ECEFF1; color: rgba(0,0,0,0.87); font-family: Roboto, Helvetica, Arial, sans-serif; margin: 0; padding: 0; }
      #message { background: white; max-width: 360px; margin: 100px auto 16px; padding: 32px 24px; border-radius: 3px; }
      #message h2 { color: #ffa100; font-weight: bold; font-size: 16px; margin: 0 0 8px; }
      #message h1 { font-size: 22px; font-weight: 300; color: rgba(0,0,0,0.6); margin: 0 0 16px;}
      #message p { line-height: 140%; margin: 16px 0 24px; font-size: 14px; }
      #message a { display: block; text-align: center; background: #039be5; text-transform: uppercase; text-decoration: none; color: white; padding: 16px; border-radius: 4px; }
      #message, #message a { box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24); }
      #load { color: rgba(0,0,0,0.4); text-align: center; font-size: 13px; }
      @media (max-width: 600px) {
        body, #message { margin-top: 0; background: white; box-shadow: none; }
        body { border-top: 16px solid #ffa100; }
      }
    </style>
  </head>
  <body>
    <div id="message">
      <h2>Welcome</h2>
      <h1>Firebase Hosting Setup Complete</h1>
      <p>You're seeing this because you've successfully setup Firebase Hosting. Now it's time to go build something extraordinary!</p>
      <a target="_blank" href="https://firebase.google.com/docs/hosting/">Open Hosting Documentation</a>
    </div>
    <p id="load">Firebase SDK Loading&hellip;</p>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const loadEl = document.querySelector('#load');
        // // 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥
        // // The Firebase SDK is initialized and available here!
        //
        // firebase.auth().onAuthStateChanged(user => { });
        // firebase.database().ref('/path/to/ref').on('value', snapshot => { });
        // firebase.firestore().doc('/foo/bar').get().then(() => { });
        // firebase.functions().httpsCallable('yourFunction')().then(() => { });
        // firebase.messaging().requestPermission().then(() => { });
        // firebase.storage().ref('/path/to/ref').getDownloadURL().then(() => { });
        // firebase.analytics(); // call to activate
        // firebase.analytics().logEvent('tutorial_completed');
        // firebase.performance(); // call to activate
        //
        // // 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥

        try {
          let app = firebase.app();
          let features = [
            'auth', 
            'database', 
            'firestore',
            'functions',
            'messaging', 
            'storage', 
            'analytics', 
            'remoteConfig',
            'performance',
          ].filter(feature => typeof app[feature] === 'function');
          loadEl.textContent = `Firebase SDK loaded with ${features.join(', ')}`;
        } catch (e) {
          console.error(e);
          loadEl.textContent = 'Error loading the Firebase SDK, check the console.';
        }
      });
    </script>
  </body>
</html>


════════════════════════════════════════════════════════════════════════════════
FILE: public\manifest.json
════════════════════════════════════════════════════════════════════════════════

{
  "name": "Memory Game",
  "short_name": "Memory",
  "description": "A fun memory card matching game",
  "theme_color": "#3b82f6",
  "background_color": "#ffffff",
  "display": "standalone",
  "orientation": "portrait",
  "scope": "/",
  "start_url": "/",
  "icons": [
    {
      "src": "/icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}

════════════════════════════════════════════════════════════════════════════════
FILE: README.md
════════════════════════════════════════════════════════════════════════════════

This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


════════════════════════════════════════════════════════════════════════════════
FILE: src\app\game\page.tsx
════════════════════════════════════════════════════════════════════════════════



════════════════════════════════════════════════════════════════════════════════
FILE: src\app\globals.css
════════════════════════════════════════════════════════════════════════════════

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }
}

@layer components {
  .game-card {
    @apply relative w-16 h-16 md:w-20 md:h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg shadow-lg cursor-pointer transform transition-all duration-300 hover:scale-105;
  }
  
  .game-card.flipped {
    @apply bg-white border-2 border-gray-300;
  }
  
  .game-card.matched {
    @apply bg-green-100 border-2 border-green-400;
  }
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\app\layout.tsx
════════════════════════════════════════════════════════════════════════════════

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


════════════════════════════════════════════════════════════════════════════════
FILE: src\app\page.tsx
════════════════════════════════════════════════════════════════════════════════

'use client'

import { useEffect, useState } from 'react';
import { useGameStore } from '../store/game-store';
import PlayerSetup from '../components/PlayerSetup';
import GameBoard from '../components/GameBoard';
import { FirebaseService } from '../lib/firebase-service';
import { calculateScore } from '../lib/game-logic';
import { motion } from 'framer-motion';
import { Player } from './types/game';

interface FinalPlayerScore extends Player {
  finalScore: number;
  timeElapsed: number;
}

export default function Home() {
  const { 
    gameStatus, 
    players, 
    currentPlayer, 
    difficulty, 
    startTime, 
    resetGame,
    cards 
  } = useGameStore();

  const [gameTime, setGameTime] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [finalScores, setFinalScores] = useState<FinalPlayerScore[]>([]);

  // Update game timer
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (gameStatus === 'playing' && startTime) {
      interval = setInterval(() => {
        setGameTime(Date.now() - startTime);
      }, 1000);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [gameStatus, startTime]);

  // Handle game completion
  useEffect(() => {
    if (gameStatus === 'finished') {
      handleGameComplete();
    }
  }, [gameStatus]);

  const handleGameComplete = async () => {
    const endTime = Date.now();
    const totalTime = startTime ? endTime - startTime : 0;
    
    // Calculate final scores
    const finalPlayerScores: FinalPlayerScore[] = players.map((player: Player) => {
      const calculatedScore = calculateScore(player.moves, totalTime, difficulty);
      return {
        ...player,
        finalScore: calculatedScore,
        timeElapsed: totalTime
      };
    });

    // Sort by score for ranking
    finalPlayerScores.sort((a: FinalPlayerScore, b: FinalPlayerScore) => b.finalScore - a.finalScore);
    setFinalScores(finalPlayerScores);
    setShowResults(true);

    // Save scores to Firebase
    try {
      for (const player of finalPlayerScores) {
        await FirebaseService.saveGameScore({
          playerName: player.name,
          score: player.finalScore,
          moves: player.moves,
          timeElapsed: totalTime,
          difficulty,
          timestamp: endTime
        });
      }
      console.log('Scores saved to Firebase!');
    } catch (error) {
      console.error('Error saving scores:', error);
    }
  };

  const formatTime = (milliseconds: number) => {
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    
    if (minutes > 0) {
      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
    return `${remainingSeconds}s`;
  };

  const handleNewGame = () => {
    setShowResults(false);
    setGameTime(0);
    setFinalScores([]);
    resetGame();
  };

  // Game Results Modal
  if (showResults) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="bg-white rounded-xl shadow-xl p-6 max-w-md w-full"
        >
          <div className="text-center mb-6">
            <div className="text-6xl mb-2">🎉</div>
            <h2 className="text-2xl font-bold text-gray-800">Game Complete!</h2>
            <p className="text-gray-600">Final Results</p>
          </div>

          <div className="space-y-3 mb-6">
            {finalScores.map((player: FinalPlayerScore, index: number) => (
              <div
                key={player.id}
                className={`
                  flex items-center justify-between p-3 rounded-lg
                  ${index === 0 
                    ? 'bg-yellow-100 border-2 border-yellow-400' 
                    : 'bg-gray-50 border border-gray-200'
                  }
                `}
              >
                <div className="flex items-center space-x-3">
                  <div className={`
                    w-8 h-8 rounded-full flex items-center justify-center font-bold
                    ${index === 0 ? 'bg-yellow-500 text-white' : 'bg-gray-300 text-gray-700'}
                  `}>
                    {index + 1}
                  </div>
                  <div>
                    <div className="font-medium">{player.name}</div>
                    <div className="text-sm text-gray-600">
                      {player.moves} moves • {formatTime(player.timeElapsed)}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="font-bold text-lg">{player.finalScore.toLocaleString()}</div>
                  <div className="text-xs text-gray-500">points</div>
                </div>
              </div>
            ))}
          </div>

          <div className="grid grid-cols-2 gap-3">
            <button
              onClick={handleNewGame}
              className="py-2 px-4 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium transition-colors"
            >
              New Game
            </button>
            <button
              onClick={() => window.location.reload()}
              className="py-2 px-4 bg-gray-300 hover:bg-gray-400 text-gray-700 rounded-lg font-medium transition-colors"
            >
              Main Menu
            </button>
          </div>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header with game info */}
      {gameStatus === 'playing' && (
        <motion.div
          initial={{ y: -50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          className="bg-white shadow-sm p-4"
        >
          <div className="max-w-4xl mx-auto flex items-center justify-between">
            <div className="flex items-center space-x-6">
              <div className="text-center">
                <div className="text-sm text-gray-600">Time</div>
                <div className="font-bold text-lg">{formatTime(gameTime)}</div>
              </div>
              
              {players.length === 1 ? (
                <div className="text-center">
                  <div className="text-sm text-gray-600">Moves</div>
                  <div className="font-bold text-lg">{players[0]?.moves || 0}</div>
                </div>
              ) : (
                <div className="flex space-x-4">
                  {players.map((player: Player, index: number) => (
                    <div
                      key={player.id}
                      className={`text-center px-3 py-1 rounded-lg ${
                        index === currentPlayer 
                          ? 'bg-blue-100 border-2 border-blue-400' 
                          : 'bg-gray-100'
                      }`}
                    >
                      <div className="text-xs text-gray-600">{player.name}</div>
                      <div className="font-bold">{player.score}</div>
                    </div>
                  ))}
                </div>
              )}
              
              <div className="text-center">
                <div className="text-sm text-gray-600">Difficulty</div>
                <div className="font-bold text-lg capitalize">{difficulty}</div>
              </div>
            </div>

            <button
              onClick={handleNewGame}
              className="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg font-medium transition-colors"
            >
              Quit Game
            </button>
          </div>
        </motion.div>
      )}

      {/* Main Game Content */}
      <div className="container mx-auto py-8">
        {gameStatus === 'setup' && <PlayerSetup />}
        {gameStatus === 'playing' && <GameBoard />}
      </div>
    </div>
  );
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\app\types\game.ts
════════════════════════════════════════════════════════════════════════════════

// src/app/types/game.ts

export interface Player {
  id: string;
  name: string;
  score: number;
  moves: number;
  timeElapsed: number;
}

export interface Card {
  id: string;
  value: string;
  isFlipped: boolean;
  isMatched: boolean;
  imageUrl?: string;
}

export interface GameState {
  cards: Card[];
  players: Player[];
  currentPlayer: number;
  gameStatus: 'setup' | 'playing' | 'paused' | 'finished';
  difficulty: 'easy' | 'medium' | 'hard';
  startTime: number | null;
  gameMode: 'single' | 'multiplayer';
}

export interface GameScore {
  id: string;
  playerName: string;
  score: number;
  moves: number;
  timeElapsed: number;
  difficulty: string;
  timestamp: number;
  gameMode?: string;
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\components\ErrorBoundary.tsx
════════════════════════════════════════════════════════════════════════════════

'use client'

import { Component, ReactNode } from 'react';

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: any) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || (
        <div className="text-center py-8">
          <h2 className="text-xl font-bold text-red-600 mb-2">Oops! Something went wrong</h2>
          <button
            onClick={() => this.setState({ hasError: false })}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg"
          >
            Try Again
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\components\GameBoard.tsx
════════════════════════════════════════════════════════════════════════════════

'use client'

import { useEffect } from 'react';
import { useGameStore } from '../store/game-store';
import GameCard from './ui/Card';
import { motion, AnimatePresence } from 'framer-motion';
import GameStats from '../components/GameStats';

export default function GameBoard() {
  const { cards, gameStatus, flipCard, players, currentPlayer, endGame } = useGameStore();

  // Check if game is complete
  useEffect(() => {
    if (cards.length > 0 && cards.every(card => card.isMatched)) {
      setTimeout(() => {
        endGame();
      }, 1500); // Longer delay to enjoy the completion
    }
  }, [cards, endGame]);

  if (gameStatus !== 'playing') {
    return null;
  }

  // Determine grid layout based on number of cards
  const getGridConfig = () => {
    const cardCount = cards.length;
    if (cardCount <= 12) return { 
      cols: 'grid-cols-3 md:grid-cols-4', 
      gap: 'gap-4 md:gap-6',
      maxWidth: 'max-w-2xl'
    };
    if (cardCount <= 16) return { 
      cols: 'grid-cols-4', 
      gap: 'gap-3 md:gap-5',
      maxWidth: 'max-w-3xl'
    };
    return { 
      cols: 'grid-cols-4 md:grid-cols-6', 
      gap: 'gap-2 md:gap-4',
      maxWidth: 'max-w-4xl'
    };
  };

  const { cols, gap, maxWidth } = getGridConfig();

  // Check if any cards are currently flipped (to disable clicking during matching check)
  const flippedCards = cards.filter(card => card.isFlipped && !card.isMatched);
  const isCheckingMatch = flippedCards.length === 2;

  // Calculate completion percentage
  const matchedCards = cards.filter(card => card.isMatched).length;
  const completionPercentage = cards.length > 0 ? (matchedCards / cards.length) * 100 : 0;

  return (
    <div className="flex flex-col items-center space-y-8 p-4">
      {/* Current Player Indicator with enhanced styling */}
      <GameStats />
      <AnimatePresence mode="wait">
        {players.length > 1 && (
          <motion.div
            key={currentPlayer}
            initial={{ scale: 0.8, opacity: 0, y: -20 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.8, opacity: 0, y: 20 }}
            transition={{ type: "spring", stiffness: 300, damping: 25 }}
            className="relative"
          >
            <div className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl shadow-xl px-8 py-4 text-white">
              <div className="text-center">
                <div className="text-sm opacity-90 font-medium">Current Player</div>
                <div className="text-xl font-bold flex items-center justify-center space-x-2">
                  <span>👤</span>
                  <span>{players[currentPlayer]?.name}</span>
                </div>
              </div>
              {/* Decorative elements */}
              <div className="absolute -top-1 -right-1 w-6 h-6 bg-yellow-400 rounded-full flex items-center justify-center">
                <span className="text-xs">⭐</span>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Progress Bar */}
      <motion.div 
        className="w-full max-w-md bg-gray-200 rounded-full h-3 shadow-inner"
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ delay: 0.5 }}
      >
        <motion.div
          className="bg-gradient-to-r from-green-400 to-emerald-500 h-3 rounded-full shadow-sm"
          initial={{ width: 0 }}
          animate={{ width: `${completionPercentage}%` }}
          transition={{ duration: 0.5, ease: "easeOut" }}
        />
        <div className="text-center mt-2 text-sm text-gray-600 font-medium">
          {Math.round(completionPercentage)}% Complete
        </div>
      </motion.div>

      {/* Game Board Grid with enhanced container */}
      <motion.div
        initial={{ opacity: 0, scale: 0.9, y: 20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
        className={`
          grid ${cols} ${gap} ${maxWidth} mx-auto p-6 md:p-8
          bg-gradient-to-br from-white via-gray-50 to-blue-50
          rounded-3xl shadow-2xl border border-white/50
          backdrop-blur-sm
        `}
        style={{
          background: `
            radial-gradient(circle at 20% 20%, rgba(120, 119, 198, 0.1) 0%, transparent 50%),
            radial-gradient(circle at 80% 80%, rgba(255, 119, 198, 0.1) 0%, transparent 50%),
            linear-gradient(135deg, #ffffff 0%, #f8fafc 50%, #e0f2fe 100%)
          `
        }}
      >
        {cards.map((card, index) => (
          <motion.div
            key={card.id}
            initial={{ opacity: 0, y: 30, rotateY: -90 }}
            animate={{ opacity: 1, y: 0, rotateY: 0 }}
            transition={{ 
              delay: index * 0.05, 
              duration: 0.4,
              type: "spring",
              stiffness: 200
            }}
          >
            <GameCard
              card={card}
              onClick={flipCard}
              disabled={isCheckingMatch}
            />
          </motion.div>
        ))}
      </motion.div>

      {/* Enhanced Game Status with better feedback */}
      <AnimatePresence mode="wait">
        <motion.div 
          key={`${isCheckingMatch}-${flippedCards.length}`}
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          className="text-center"
        >
          <div className={`
            px-6 py-3 rounded-2xl font-medium text-lg shadow-lg
            ${isCheckingMatch 
              ? 'bg-yellow-100 text-yellow-800 border border-yellow-200' 
              : flippedCards.length === 1 
                ? 'bg-blue-100 text-blue-800 border border-blue-200'
                : 'bg-gray-100 text-gray-600 border border-gray-200'
            }
          `}>
            {isCheckingMatch && (
              <div className="flex items-center justify-center space-x-2">
                <div className="animate-spin w-4 h-4 border-2 border-yellow-600 border-t-transparent rounded-full"></div>
                <span>Checking for match...</span>
              </div>
            )}
            {!isCheckingMatch && flippedCards.length === 1 && (
              <div className="flex items-center justify-center space-x-2">
                <span>🎯</span>
                <span>Pick another card to match!</span>
              </div>
            )}
            {!isCheckingMatch && flippedCards.length === 0 && (
              <div className="flex items-center justify-center space-x-2">
                <span>🚀</span>
                <span>Click a card to start matching!</span>
              </div>
            )}
          </div>
        </motion.div>
      </AnimatePresence>

      {/* Floating celebration particles when cards match */}
      {cards.some(card => card.isMatched) && (
        <div className="fixed inset-0 pointer-events-none overflow-hidden">
          {[...Array(5)].map((_, i) => (
            <motion.div
              key={i}
              className="absolute text-2xl"
              initial={{ 
                x: Math.random() * window.innerWidth,
                y: window.innerHeight + 50,
                rotate: 0,
                opacity: 0
              }}
              animate={{ 
                y: -50,
                rotate: 360,
                opacity: [0, 1, 1, 0]
              }}
              transition={{ 
                duration: 3,
                delay: i * 0.2,
                repeat: Infinity,
                repeatDelay: 4
              }}
            >
              {['🎉', '⭐', '🎊', '✨', '🌟'][i]}
            </motion.div>
          ))}
        </div>
      )}
    </div>
  );
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\components\GameStats.tsx
════════════════════════════════════════════════════════════════════════════════

// src/components/GameStats.tsx
'use client'

import { useGameStore } from '../store/game-store';
import { motion } from 'framer-motion';

export default function GameStats() {
  const { players, currentPlayer, gameMode, gameStatus, cards } = useGameStore();

  if (gameStatus !== 'playing') return null;

  const matchedPairs = cards.filter(card => card.isMatched).length / 2;
  const totalPairs = cards.length / 2;
  const progress = (matchedPairs / totalPairs) * 100;

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-white rounded-lg shadow-md p-4 mb-4"
    >
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
        {/* Progress */}
        <div>
          <p className="text-sm text-gray-600">Progress</p>
          <div className="mt-1 bg-gray-200 rounded-full h-2">
            <motion.div
              className="bg-green-500 h-2 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${progress}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>
          <p className="text-xs mt-1">{matchedPairs}/{totalPairs} pairs</p>
        </div>

        {/* Current Player */}
        {gameMode === 'multiplayer' && (
          <div>
            <p className="text-sm text-gray-600">Current Turn</p>
            <p className="text-lg font-bold text-blue-600">
              {players[currentPlayer]?.name}
            </p>
          </div>
        )}

        {/* Scores */}
        {players.map((player, index) => (
          <div key={player.id}>
            <p className="text-sm text-gray-600">{player.name}</p>
            <p className="text-lg font-bold">
              {player.score} pts
            </p>
            <p className="text-xs text-gray-500">
              {player.moves} moves
            </p>
          </div>
        ))}
      </div>
    </motion.div>
  );
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\components\PlayerSetup.tsx
════════════════════════════════════════════════════════════════════════════════

'use client'

import { useState } from 'react';
import { useGameStore } from '../store/game-store';
import { motion, AnimatePresence } from 'framer-motion';

export default function PlayerSetup() {
  const { gameStatus, initializeGame } = useGameStore();
  const [playerName, setPlayerName] = useState('');
  const [players, setPlayers] = useState<string[]>(['']);
  const [difficulty, setDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');
  const [gameMode, setGameMode] = useState<'single' | 'multiplayer'>('single');

  if (gameStatus !== 'setup') {
    return null;
  }

  const handleAddPlayer = () => {
    if (players.length < 4) {
      setPlayers([...players, '']);
    }
  };

  const handleRemovePlayer = (index: number) => {
    if (players.length > 1) {
      setPlayers(players.filter((_, i) => i !== index));
    }
  };

  const updatePlayerName = (index: number, name: string) => {
    const newPlayers = [...players];
    newPlayers[index] = name;
    setPlayers(newPlayers);
  };

  const handleStartGame = () => {
    let playerNames: string[];
    
    if (gameMode === 'single') {
      playerNames = [playerName || 'Player 1'];
    } else {
      playerNames = players
        .map((name, index) => name.trim() || `Player ${index + 1}`)
        .filter(name => name.length > 0);
    }

    if (playerNames.length > 0) {
      initializeGame(difficulty, playerNames, gameMode);
    }
  };

  const isValid = gameMode === 'single' 
    ? true 
    : players.some(name => name.trim().length > 0);

  const difficultyOptions = [
    { key: 'easy', label: 'Easy', desc: '6 pairs', emoji: '😊', color: 'green' },
    { key: 'medium', label: 'Medium', desc: '8 pairs', emoji: '🤔', color: 'yellow' },
    { key: 'hard', label: 'Hard', desc: '12 pairs', emoji: '🔥', color: 'red' }
  ];

  return (
    <motion.div
      initial={{ opacity: 0, y: 30, scale: 0.9 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      transition={{ duration: 0.6, type: "spring", stiffness: 200 }}
      className="max-w-lg mx-auto"
    >
      <div className="bg-gradient-to-br from-white via-blue-50 to-purple-50 rounded-3xl shadow-2xl p-8 m-4 border border-white/50 backdrop-blur-sm">
        {/* Header with floating animation */}
        <motion.div 
          className="text-center mb-8"
          initial={{ y: -20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.5 }}
        >
          <motion.div 
            className="text-6xl mb-4"
            animate={{ 
              rotate: [0, -10, 10, -10, 0],
              scale: [1, 1.1, 1]
            }}
            transition={{ 
              rotate: { repeat: Infinity, duration: 2, repeatDelay: 3 },
              scale: { repeat: Infinity, duration: 2, repeatDelay: 3 }
            }}
          >
            🧠
          </motion.div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
            Memory Game
          </h1>
          <p className="text-gray-600 font-medium">Match pairs of cards to win!</p>
        </motion.div>

        {/* Game Mode Selection with enhanced styling */}
        <motion.div 
          className="mb-8"
          initial={{ x: -20, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: 0.3, duration: 0.5 }}
        >
          <label className="block text-sm font-semibold text-gray-700 mb-3">
            🎮 Game Mode
          </label>
          <div className="grid grid-cols-2 gap-3">
            {[
              { key: 'single', label: 'Single Player', emoji: '👤', desc: 'Play solo' },
              { key: 'multiplayer', label: 'Multiplayer', emoji: '👥', desc: 'Play with friends' }
            ].map(({ key, label, emoji, desc }) => (
              <motion.button
                key={key}
                onClick={() => setGameMode(key as any)}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className={`
                  px-4 py-4 rounded-xl font-medium transition-all duration-200 border-2
                  ${gameMode === key
                    ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white border-blue-400 shadow-lg'
                    : 'bg-white text-gray-700 hover:bg-gray-50 border-gray-200 shadow-sm hover:shadow-md'
                  }
                `}
              >
                <div className="text-xl mb-1">{emoji}</div>
                <div className="text-sm font-bold">{label}</div>
                <div className="text-xs opacity-80">{desc}</div>
              </motion.button>
            ))}
          </div>
        </motion.div>

        {/* Player Setup with animations */}
        <motion.div 
          className="mb-8"
          initial={{ x: 20, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: 0.4, duration: 0.5 }}
        >
          <AnimatePresence mode="wait">
            {gameMode === 'single' ? (
              <motion.div
                key="single"
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
              >
                <label className="block text-sm font-semibold text-gray-700 mb-3">
                  👤 Your Name (Optional)
                </label>
                <input
                  type="text"
                  value={playerName}
                  onChange={(e) => setPlayerName(e.target.value)}
                  placeholder="Enter your name..."
                  className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors bg-white shadow-sm"
                />
              </motion.div>
            ) : (
              <motion.div
                key="multiplayer"
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex items-center justify-between mb-3">
                  <label className="text-sm font-semibold text-gray-700">
                    👥 Players ({players.length}/4)
                  </label>
                  {players.length < 4 && (
                    <motion.button
                      onClick={handleAddPlayer}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      className="text-sm text-blue-500 hover:text-blue-600 font-medium bg-blue-50 px-3 py-1 rounded-lg border border-blue-200"
                    >
                      + Add Player
                    </motion.button>
                  )}
                </div>
                <div className="space-y-3">
                  <AnimatePresence>
                    {players.map((player, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: 20 }}
                        transition={{ duration: 0.2 }}
                        className="flex gap-3"
                      >
                        <input
                          type="text"
                          value={player}
                          onChange={(e) => updatePlayerName(index, e.target.value)}
                          placeholder={`Player ${index + 1}`}
                          className="flex-1 px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors bg-white shadow-sm"
                        />
                        {players.length > 1 && (
                          <motion.button
                            onClick={() => handleRemovePlayer(index)}
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                            className="px-4 py-3 text-red-500 hover:text-red-600 hover:bg-red-50 rounded-xl border-2 border-red-200 transition-colors"
                          >
                            ✕
                          </motion.button>
                        )}
                      </motion.div>
                    ))}
                  </AnimatePresence>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>

        {/* Enhanced Difficulty Selection */}
        <motion.div 
          className="mb-8"
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.5, duration: 0.5 }}
        >
          <label className="block text-sm font-semibold text-gray-700 mb-3">
            ⚡ Difficulty Level
          </label>
          <div className="grid grid-cols-3 gap-3">
            {difficultyOptions.map(({ key, label, desc, emoji, color }) => (
              <motion.button
                key={key}
                onClick={() => setDifficulty(key as any)}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className={`
                  px-3 py-4 rounded-xl text-center transition-all duration-200 border-2
                  ${difficulty === key
                    ? `bg-gradient-to-br ${
                        color === 'green' ? 'from-green-400 to-emerald-500 border-green-400' :
                        color === 'yellow' ? 'from-yellow-400 to-orange-500 border-yellow-400' :
                        'from-red-400 to-pink-500 border-red-400'
                      } text-white shadow-lg`
                    : 'bg-white text-gray-700 hover:bg-gray-50 border-gray-200 shadow-sm hover:shadow-md'
                  }
                `}
              >
                <div className="text-2xl mb-1">{emoji}</div>
                <div className="font-bold text-sm">{label}</div>
                <div className="text-xs opacity-80">{desc}</div>
              </motion.button>
            ))}
          </div>
        </motion.div>

        {/* Enhanced Start Game Button */}
        <motion.button
          onClick={handleStartGame}
          disabled={!isValid}
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.6, duration: 0.5 }}
          whileHover={isValid ? { scale: 1.02 } : {}}
          whileTap={isValid ? { scale: 0.98 } : {}}
          className={`
            w-full py-4 px-6 rounded-xl font-bold text-lg transition-all duration-300 border-2
            ${isValid
              ? 'bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white border-green-400 shadow-lg hover:shadow-xl'
              : 'bg-gray-300 text-gray-500 cursor-not-allowed border-gray-300'
            }
          `}
        >
          <span className="flex items-center justify-center space-x-2">
            <span>🚀</span>
            <span>Start Game</span>
          </span>
        </motion.button>
      </div>
    </motion.div>
  );
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\components\ui\Button.tsx
════════════════════════════════════════════════════════════════════════════════



════════════════════════════════════════════════════════════════════════════════
FILE: src\components\ui\Card.tsx
════════════════════════════════════════════════════════════════════════════════

'use client'

import { motion } from 'framer-motion';
import { Card as CardType } from '../../app/types/game';

interface GameCardProps {
  card: CardType;
  onClick: (cardId: string) => void;
  disabled?: boolean;
}

export default function GameCard({ card, onClick, disabled = false }: GameCardProps) {
  const handleClick = () => {
    if (!disabled && !card.isFlipped && !card.isMatched) {
      onClick(card.id);
    }
  };

  return (
    <motion.div
      className={`
        relative w-20 h-20 md:w-24 md:h-24 lg:w-28 lg:h-28
        cursor-pointer rounded-xl shadow-lg
        transform transition-all duration-300
        ${disabled || card.isMatched ? 'cursor-not-allowed' : 'hover:scale-105 hover:shadow-xl'}
        ${card.isMatched ? 'opacity-90' : ''}
      `}
      onClick={handleClick}
      role="button"
      aria-label={`Memory card ${card.isFlipped ? `showing ${card.value}` : 'face down'}`}
      whileHover={!disabled && !card.isFlipped && !card.isMatched ? { 
        scale: 1.05,
        rotateY: 5,
        transition: { duration: 0.2 }
      } : {}}
      whileTap={!disabled && !card.isFlipped && !card.isMatched ? { 
        scale: 0.95,
        transition: { duration: 0.1 }
      } : {}}
      layout
    >
      <motion.div
        className="relative w-full h-full preserve-3d cursor-pointer"
        animate={{ rotateY: (card.isFlipped || card.isMatched) ? 180 : 0 }}
        transition={{ 
          duration: 0.6, 
          type: "spring", 
          stiffness: 200, 
          damping: 25 
        }}
        style={{ transformStyle: "preserve-3d" }}
      >
        {/* Card Back */}
        <div 
          className="absolute inset-0 backface-hidden rounded-xl bg-gradient-to-br from-indigo-500 via-purple-600 to-pink-600 flex items-center justify-center shadow-lg border-2 border-white/20"
          style={{ backfaceVisibility: 'hidden' }}
        >
          <div className="relative">
            {/* Sparkle pattern on back */}
            <div className="absolute inset-0 bg-white/10 rounded-lg"></div>
            <div className="text-white text-3xl font-bold drop-shadow-lg">?</div>
            {/* Decorative corners */}
            <div className="absolute -top-1 -left-1 w-3 h-3 bg-white/30 rounded-full"></div>
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-white/30 rounded-full"></div>
            <div className="absolute -bottom-1 -left-1 w-3 h-3 bg-white/30 rounded-full"></div>
            <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-white/30 rounded-full"></div>
          </div>
        </div>

        {/* Card Front */}
        <div 
          className={`
            absolute inset-0 backface-hidden rounded-xl flex items-center justify-center text-4xl md:text-5xl shadow-lg border-2
            ${card.isMatched 
              ? 'bg-gradient-to-br from-green-100 to-emerald-200 border-emerald-400 shadow-emerald-200' 
              : 'bg-gradient-to-br from-white to-gray-50 border-gray-200 shadow-gray-300'
            }
          `}
          style={{ 
            backfaceVisibility: 'hidden',
            transform: 'rotateY(180deg)'
          }}
        >
          <motion.div
            initial={{ scale: 0.5, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.3, duration: 0.3 }}
            className="relative"
          >
            {card.value}
            {/* Subtle glow effect */}
            <div className="absolute inset-0 bg-gradient-to-t from-transparent via-white/5 to-white/20 rounded-lg"></div>
          </motion.div>
        </div>
      </motion.div>

      {/* Matched indicator with celebration animation */}
      {card.isMatched && (
        <motion.div
          initial={{ scale: 0, rotate: -180, opacity: 0 }}
          animate={{ scale: 1, rotate: 0, opacity: 1 }}
          transition={{ 
            delay: 0.4, 
            duration: 0.5,
            type: "spring",
            stiffness: 300
          }}
          className="absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center shadow-lg border-2 border-white"
        >
          <motion.svg 
            className="w-5 h-5 text-white" 
            fill="currentColor" 
            viewBox="0 0 20 20"
            initial={{ pathLength: 0 }}
            animate={{ pathLength: 1 }}
            transition={{ delay: 0.6, duration: 0.3 }}
          >
            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
          </motion.svg>
        </motion.div>
      )}

      {/* Hover glow effect */}
      {!card.isFlipped && !card.isMatched && !disabled && (
        <div className="absolute inset-0 rounded-xl bg-gradient-to-br from-blue-400/0 to-purple-400/0 hover:from-blue-400/20 hover:to-purple-400/20 transition-all duration-300 pointer-events-none"></div>
      )}
    </motion.div>
  );
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\components\ui\GameCard.tsx
════════════════════════════════════════════════════════════════════════════════



════════════════════════════════════════════════════════════════════════════════
FILE: src\components\ui\Scoreboard.tsx
════════════════════════════════════════════════════════════════════════════════



════════════════════════════════════════════════════════════════════════════════
FILE: src\components\ui\Skeleton.tsx
════════════════════════════════════════════════════════════════════════════════

// src/components/ui/Skeleton.tsx
export function CardSkeleton() {
  return (
    <div className="animate-pulse">
      <div className="w-20 h-20 md:w-24 md:h-24 lg:w-28 lg:h-28 bg-gray-300 rounded-xl"></div>
    </div>
  );
}

export function BoardSkeleton({ count = 16 }: { count?: number }) {
  return (
    <div className="grid grid-cols-4 gap-4">
      {Array.from({ length: count }).map((_, i) => (
        <CardSkeleton key={i} />
      ))}
    </div>
  );
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\leaderboard\page.tsx
════════════════════════════════════════════════════════════════════════════════

'use client'

import { useEffect, useState } from 'react';
import { FirebaseService } from '@/lib/firebase-service';
import { GameScore } from '@/app/types/game';
import Link from 'next/link';
import { motion } from 'framer-motion';

export default function LeaderboardPage() {
  const [scores, setScores] = useState<GameScore[]>([]);
  const [filter, setFilter] = useState<'all' | 'easy' | 'medium' | 'hard'>('all');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadScores();
  }, [filter]);

  const loadScores = async () => {
    setLoading(true);
    try {
      const topScores = await FirebaseService.getTopScores(filter, 20);
      setScores(topScores);
    } catch (error) {
      console.error('Error loading scores:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4">
      <div className="max-w-4xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
            🏆 Leaderboard
          </h1>
        </motion.div>

        {/* Filter buttons */}
        <div className="flex justify-center gap-2 mb-6">
          {(['all', 'easy', 'medium', 'hard'] as const).map(level => (
            <button
              key={level}
              onClick={() => setFilter(level)}
              className={`px-4 py-2 rounded-lg font-medium transition-all ${
                filter === level
                  ? 'bg-blue-500 text-white shadow-lg'
                  : 'bg-white text-gray-700 hover:bg-gray-100'
              }`}
            >
              {level.charAt(0).toUpperCase() + level.slice(1)}
            </button>
          ))}
        </div>

        {/* Scores table */}
        {loading ? (
          <div className="text-center py-8">Loading...</div>
        ) : (
          <div className="bg-white rounded-xl shadow-xl overflow-hidden">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left">Rank</th>
                  <th className="px-4 py-3 text-left">Player</th>
                  <th className="px-4 py-3 text-center">Score</th>
                  <th className="px-4 py-3 text-center">Moves</th>
                  <th className="px-4 py-3 text-center">Time</th>
                  <th className="px-4 py-3 text-center">Difficulty</th>
                </tr>
              </thead>
              <tbody>
                {scores.map((score, index) => (
                  <motion.tr
                    key={score.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}
                  >
                    <td className="px-4 py-3">
                      {index < 3 ? (
                        <span className="text-2xl">
                          {index === 0 ? '🥇' : index === 1 ? '🥈' : '🥉'}
                        </span>
                      ) : (
                        `#${index + 1}`
                      )}
                    </td>
                    <td className="px-4 py-3 font-medium">{score.playerName}</td>
                    <td className="px-4 py-3 text-center font-bold">{score.score}</td>
                    <td className="px-4 py-3 text-center">{score.moves}</td>
                    <td className="px-4 py-3 text-center">
                      {Math.floor(score.timeElapsed / 1000)}s
                    </td>
                    <td className="px-4 py-3 text-center">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        score.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                        score.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {score.difficulty}
                      </span>
                    </td>
                  </motion.tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        <div className="text-center mt-8">
          <Link
            href="/"
            className="inline-block px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg font-medium transition-colors"
          >
            Back to Game
          </Link>
        </div>
      </div>
    </div>
  );
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\lib\firebase-service.ts
════════════════════════════════════════════════════════════════════════════════

import { 
  collection, 
  addDoc, 
  query, 
  orderBy, 
  limit, 
  getDocs, 
  where,
  Timestamp 
} from 'firebase/firestore';
import { db } from './firebase';
import { GameScore } from '../app/types/game';

export class FirebaseService {
  
  /**
   * Save a game score to Firestore
   */
  static async saveGameScore(scoreData: Omit<GameScore, 'id'>): Promise<string> {
    try {
      const docRef = await addDoc(collection(db, 'gameScores'), {
        ...scoreData,
        timestamp: Date.now()
      });
      console.log('Score saved with ID: ', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('Error saving score: ', error);
      throw new Error('Failed to save score');
    }
  }

  /**
   * Get top scores for leaderboard
   */
  static async getTopScores(
    difficulty: string = 'all', 
    limitCount: number = 10
  ): Promise<GameScore[]> {
    try {
      let q;
      
      if (difficulty === 'all') {
        // Simple query that doesn't require indexes
        q = query(
          collection(db, 'gameScores'),
          orderBy('score', 'desc'),
          limit(limitCount)
        );
      } else {
        // This query requires the index we're creating
        q = query(
          collection(db, 'gameScores'),
          where('difficulty', '==', difficulty),
          orderBy('score', 'desc'),
          limit(limitCount)
        );
      }

      const querySnapshot = await getDocs(q);
      const scores: GameScore[] = [];

      querySnapshot.forEach((doc) => {
        scores.push({
          id: doc.id,
          ...doc.data()
        } as GameScore);
      });

      return scores;
    } catch (error) {
      console.error('Error fetching scores: ', error);
      // Return empty array instead of throwing to handle gracefully
      return [];
    }
  }

  /**
   * Get today's top scores (simplified to avoid index requirements)
   */
  static async getTodaysTopScores(limitCount: number = 5): Promise<GameScore[]> {
    try {
      // Simplified query - just get recent scores by timestamp
      const q = query(
        collection(db, 'gameScores'),
        orderBy('timestamp', 'desc'),
        limit(limitCount)
      );

      const querySnapshot = await getDocs(q);
      const scores: GameScore[] = [];

      querySnapshot.forEach((doc) => {
        scores.push({
          id: doc.id,
          ...doc.data()
        } as GameScore);
      });

      return scores;
    } catch (error) {
      console.error('Error fetching today\'s scores: ', error);
      return [];
    }
  }

  /**
   * Get player's personal best scores
   */
  static async getPlayerBestScores(playerName: string): Promise<GameScore[]> {
    try {
      const q = query(
        collection(db, 'gameScores'),
        where('playerName', '==', playerName),
        orderBy('score', 'desc'),
        limit(5)
      );

      const querySnapshot = await getDocs(q);
      const scores: GameScore[] = [];

      querySnapshot.forEach((doc) => {
        scores.push({
          id: doc.id,
          ...doc.data()
        } as GameScore);
      });

      return scores;
    } catch (error) {
      console.error('Error fetching player scores: ', error);
      return [];
    }
  }
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\lib\firebase-test.ts
════════════════════════════════════════════════════════════════════════════════

import { FirebaseService } from './firebase-service';

export async function testFirebaseConnection(): Promise<boolean> {
  try {
    // Test saving a score
    const testScore = {
      playerName: 'Test Player',
      score: 100,
      moves: 10,
      timeElapsed: 30000,
      difficulty: 'easy',
      timestamp: Date.now()
    };

    const scoreId = await FirebaseService.saveGameScore(testScore);
    console.log('✅ Firebase write successful! Score ID:', scoreId);

    // Test with simpler query (no filtering by difficulty)
    const scores = await FirebaseService.getTopScores('all', 1);
    console.log('✅ Firebase read successful! Found scores:', scores.length);

    return true;
  } catch (error) {
    console.error('❌ Firebase connection failed:', error);
    return false;
  }
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\lib\firebase.ts
════════════════════════════════════════════════════════════════════════════════

import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  // Add your Firebase config here
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);

════════════════════════════════════════════════════════════════════════════════
FILE: src\lib\preferences.ts
════════════════════════════════════════════════════════════════════════════════

// src/lib/preferences.ts
interface GamePreferences {
  soundEnabled: boolean;
  theme: 'light' | 'dark';
  cardStyle: 'emoji' | 'numbers' | 'letters';
}

const STORAGE_KEY = 'memory-game-preferences';

export const preferences = {
  get(): GamePreferences {
    if (typeof window === 'undefined') return this.getDefaults();
    
    const stored = localStorage.getItem(STORAGE_KEY);
    return stored ? JSON.parse(stored) : this.getDefaults();
  },

  set(prefs: Partial<GamePreferences>) {
    if (typeof window === 'undefined') return;
    
    const current = this.get();
    const updated = { ...current, ...prefs };
    localStorage.setItem(STORAGE_KEY, JSON.stringify(updated));
  },

  getDefaults(): GamePreferences {
    return {
      soundEnabled: true,
      theme: 'light',
      cardStyle: 'emoji'
    };
  }
};

════════════════════════════════════════════════════════════════════════════════
FILE: src\lib\sound-manager.ts
════════════════════════════════════════════════════════════════════════════════

// src/lib/sound-manager.ts
class SoundManager {
  private sounds: { [key: string]: HTMLAudioElement } = {};
  private enabled: boolean = true;

  constructor() {
    this.preloadSounds();
  }

  private preloadSounds() {
    const soundFiles = {
      flip: '/sounds/flip.mp3',
      match: '/sounds/match.mp3',
      win: '/sounds/win.mp3',
      fail: '/sounds/fail.mp3'
    };

    Object.entries(soundFiles).forEach(([key, path]) => {
      const audio = new Audio(path);
      audio.preload = 'auto';
      this.sounds[key] = audio;
    });
  }

  play(soundName: string) {
    if (this.enabled && this.sounds[soundName]) {
      this.sounds[soundName].currentTime = 0;
      this.sounds[soundName].play().catch(() => {});
    }
  }

  toggle() {
    this.enabled = !this.enabled;
  }
}

export const soundManager = new SoundManager();

════════════════════════════════════════════════════════════════════════════════
FILE: src\lib\utils.ts
════════════════════════════════════════════════════════════════════════════════

export function cn(...classes: string[]) {
  return classes.filter(Boolean).join(' ');
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\store\game-store.ts
════════════════════════════════════════════════════════════════════════════════

import { create } from 'zustand';
import { GameState, Card, Player } from '../app/types/game';
import { generateCards, checkForMatch } from '../lib/game-logic';
import confetti from 'canvas-confetti';

interface GameStore extends GameState {
  initializeGame: (difficulty: 'easy' | 'medium' | 'hard', players: string[], gameMode: 'single' | 'multiplayer') => void;
  flipCard: (cardId: string) => void;
  resetGame: () => void;
  updateScore: (playerId: string, points: number) => void;
  nextPlayer: () => void;
  endGame: () => void;
}

export const useGameStore = create<GameStore>((set, get) => ({
  // Initial state from GameState interface
  cards: [],
  players: [],
  currentPlayer: 0,
  gameStatus: 'setup',
  difficulty: 'medium',
  startTime: null,
  gameMode: 'single',

  initializeGame: (difficulty, playerNames, gameMode) => {
    const cards = generateCards(difficulty);
    const players: Player[] = playerNames.map((name, index) => ({
      id: `player-${index}`,
      name,
      score: 0,
      moves: 0,
      timeElapsed: 0
    }));

    set({
      cards,
      players,
      currentPlayer: 0,
      gameStatus: 'playing',
      difficulty,
      startTime: Date.now(),
      gameMode
    });
  },

  flipCard: (cardId) => {
    const state = get();
    if (state.gameStatus !== 'playing') return;

    const flippedCards = state.cards.filter((card: Card) => card.isFlipped && !card.isMatched);
    if (flippedCards.length >= 2) return;

    const newCards = state.cards.map((card: Card) => 
      card.id === cardId ? { ...card, isFlipped: true } : card
    );

    set({ cards: newCards });

    // Check for match after a delay
    setTimeout(() => {
      const currentState = get();
      const flippedCards = currentState.cards.filter((card: Card) => card.isFlipped && !card.isMatched);
      
      if (flippedCards.length === 2) {
        const isMatch = checkForMatch(flippedCards[0], flippedCards[1]);
        
        if (isMatch) {
          // Match found - trigger confetti!
          confetti({
            particleCount: 100,
            spread: 70,
            origin: { y: 0.6 }
          });

          set({
            cards: currentState.cards.map((card: Card) => 
              flippedCards.includes(card) ? { ...card, isMatched: true } : card
            )
          });
          
          // Update score
          const currentPlayer = currentState.players[currentState.currentPlayer];
          get().updateScore(currentPlayer.id, 10);

          // Check if game is complete
          const updatedCards = get().cards;
          if (updatedCards.every(card => card.isMatched)) {
            // Bigger celebration for game completion!
            confetti({
              particleCount: 200,
              angle: 60,
              spread: 55,
              origin: { x: 0 }
            });
            confetti({
              particleCount: 200,
              angle: 120,
              spread: 55,
              origin: { x: 1 }
            });
          }
        } else {
          // No match - flip cards back
          set({
            cards: currentState.cards.map((card: Card) => 
              flippedCards.includes(card) ? { ...card, isFlipped: false } : card
            )
          });
        }

        // Update moves and switch player if multiplayer
        if (currentState.gameMode === 'multiplayer' && !isMatch) {
          get().nextPlayer();
        }
      }
    }, 1000);
  },

  updateScore: (playerId, points) => {
    set((state) => ({
      ...state,
      players: state.players.map((player: Player) => 
        player.id === playerId 
          ? { ...player, score: player.score + points, moves: player.moves + 1 }
          : player
      )
    }));
  },

  nextPlayer: () => {
    set((state) => ({
      ...state,
      currentPlayer: (state.currentPlayer + 1) % state.players.length
    }));
  },

  resetGame: () => {
    set({
      cards: [],
      players: [],
      currentPlayer: 0,
      gameStatus: 'setup',
      difficulty: 'medium',
      startTime: null,
      gameMode: 'single'
    });
  },

  endGame: () => {
    set((state) => ({ ...state, gameStatus: 'finished' }));
  }
}));

════════════════════════════════════════════════════════════════════════════════
FILE: src\types\global.d.ts
════════════════════════════════════════════════════════════════════════════════

/// <reference types="@testing-library/jest-dom" />

import '@testing-library/jest-dom';

declare global {
  namespace jest {
    interface Matchers<R> {
      toBeInTheDocument(): R;
      toHaveClass(className: string): R;
      toHaveStyle(style: string | Record<string, any>): R;
      toBeVisible(): R;
      toBeDisabled(): R;
      toBeEnabled(): R;
      toHaveTextContent(text: string | RegExp): R;
      toHaveValue(value: string | number | string[]): R;
      toHaveDisplayValue(value: string | RegExp | Array<string | RegExp>): R;
      toBeChecked(): R;
      toBePartiallyChecked(): R;
      toHaveDescription(text: string | RegExp): R;
      toHaveErrorMessage(text: string | RegExp): R;
      toBeRequired(): R;
      toBeValid(): R;
      toBeInvalid(): R;
      toBeEmpty(): R;
      toContainElement(element: HTMLElement | null): R;
      toContainHTML(html: string): R;
      toHaveAttribute(attr: string, value?: string | RegExp | null): R;
      toHaveAccessibleDescription(text: string | RegExp): R;
      toHaveAccessibleName(text: string | RegExp): R;
      toHaveFocus(): R;
      toHaveFormValues(values: Record<string, any>): R;
    }
  }
}

════════════════════════════════════════════════════════════════════════════════
FILE: src\__tests__\components\GameCard.test.tsx
════════════════════════════════════════════════════════════════════════════════

// src/__tests__/components/GameCard.test.tsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect'; // Use extend-expect
import GameCard from '@/components/ui/Card';
import { Card } from '@/app/types/game';

// Mock framer-motion to avoid issues in tests
jest.mock('framer-motion', () => ({
  motion: {
    div: React.forwardRef(({ children, ...props }: any, ref: any) => (
      <div ref={ref} {...props}>{children}</div>
    )),
    svg: ({ children, ...props }: any) => <svg {...props}>{children}</svg>,
  },
  AnimatePresence: ({ children }: any) => <>{children}</>,
}));

describe('GameCard', () => {
  const mockCard: Card = {
    id: '1',
    value: '🎮',
    isFlipped: false,
    isMatched: false
  };

  const mockOnClick = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders correctly', () => {
    render(<GameCard card={mockCard} onClick={mockOnClick} />);
    
    const questionMark = screen.getByText('?');
    expect(questionMark).toBeInTheDocument();
  });

  it('shows question mark when not flipped', () => {
    render(<GameCard card={mockCard} onClick={mockOnClick} />);
    
    expect(screen.getByText('?')).toBeInTheDocument();
  });

  it('shows card value when flipped', () => {
    const flippedCard = { ...mockCard, isFlipped: true };
    render(<GameCard card={flippedCard} onClick={mockOnClick} />);
    
    expect(screen.getByText('🎮')).toBeInTheDocument();
  });

  it('calls onClick when clicked and not disabled', () => {
    const { container } = render(<GameCard card={mockCard} onClick={mockOnClick} />);
    
    // Click on the card container (first motion.div)
    const cardElement = container.firstChild as HTMLElement;
    fireEvent.click(cardElement);
    
    expect(mockOnClick).toHaveBeenCalledWith('1');
  });

  it('does not call onClick when disabled', () => {
    const { container } = render(<GameCard card={mockCard} onClick={mockOnClick} disabled />);
    
    const cardElement = container.firstChild as HTMLElement;
    fireEvent.click(cardElement);
    
    expect(mockOnClick).not.toHaveBeenCalled();
  });

  it('does not call onClick when already flipped', () => {
    const flippedCard = { ...mockCard, isFlipped: true };
    const { container } = render(<GameCard card={flippedCard} onClick={mockOnClick} />);
    
    const cardElement = container.firstChild as HTMLElement;
    fireEvent.click(cardElement);
    
    expect(mockOnClick).not.toHaveBeenCalled();
  });

  it('applies matched styling when matched', () => {
    const matchedCard = { ...mockCard, isMatched: true, isFlipped: true };
    const { container } = render(<GameCard card={matchedCard} onClick={mockOnClick} />);
    
    // Check if the matched card has the correct styling class
    const cardFront = container.querySelector('.border-emerald-400');
    expect(cardFront).toBeInTheDocument();
  });
});

════════════════════════════════════════════════════════════════════════════════
FILE: tsconfig.json
════════════════════════════════════════════════════════════════════════════════

{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "jest.setup.ts",
    "src/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
